name: Deploy to On Premise Server

on:
  push:
    branches:
      - main # Changing the branch here would also work
env:
  WORKDIR: /home/${{ secrets.SSH_USERNAME }}/muslimbot
  env: production

jobs:
  build:
    runs-on: ubuntu-latest
    name: Deploy to On Premise Server
    permissions:
        contents: 'read'
        id-token: 'write'
    defaults:
        run:
          shell: bash
    environment: on-premise
    outputs:
        package-version: ${{ steps.package-version.outputs.version }}
    steps:
        - uses: actions/checkout@v4
        
        - name: Set environments variable in a file .env
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: ${{ secrets.SSH_PORT }}
            script: |
              mkdir -p ${{ env.WORKDIR }}
              cd ${{ env.WORKDIR }}
              [ -e .env ] && rm .env
              echo "NODE_ENV=${{ env.env }}" >> .env
              echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" >> .env
              echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
              echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
              echo "HADITH_API_URL=${{ vars.HADITH_API_URL }}" >> .env
              echo "HADITH_SCHEDULE_HOUR=${{ vars.HADITH_SCHEDULE_HOUR }}" >> .env
              echo "HADITH_SCHEDULE_MINUTE=${{ vars.HADITH_SCHEDULE_MINUTE }}" >> .env
              echo "PRAYER_SCHEDULE_RULE=${{ vars.PRAYER_SCHEDULE_RULE }}" >> .env
          
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        
        - name: Set output version
          id: vars
          run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          
        - name: Check outputs
          run: echo ${{ steps.vars.outputs.sha_short }}
    
        - name: Build & Push docker image to Docker Hub
          run: |
            docker build --tag samy266/muslimbot:${{ steps.vars.outputs.sha_short }} --tag samy266/muslimbot:latest .
            docker push samy266/muslimbot:${{ steps.vars.outputs.sha_short }}
            docker push samy266/muslimbot:latest

        - name: 'Sync On Premise Server'
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            port: ${{ secrets.SSH_PORT }}
            script: |
              echo "Starting Docker Container..."
              cd ${{ env.WORKDIR }} 
              sudo docker stop muslimbot
              sudo docker rm muslimbot
              sudo docker run -d \
              --name muslimbot \
              --env-file .env \
              --restart=always \
              --mount type=bind,source=/var/log/muslimbot,target=/usr/src/bot/logs \
              --mount type=bind,source=/home/sm/quran,target=/usr/src/bot/quran \
              --restart=unless-stopped \
              samy266/muslimbot:${{ steps.vars.outputs.sha_short }}

              echo "Docker Container Started Successfully"
              echo "Remove .env file..."
              rm .env
              echo "Done"

        - name: Extract Package Version
          id: package-version
          run: echo "::set-output name=version::$(jq -r '.version' package.json)"
          
        - name: Generate Git Tag
          id: generate_tag
          run: |
            VERSION_PREFIX="v"
            VERSION_MAJOR_MINOR="1.0"
            VERSION_PATCH=$(git tag --list "${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.*" --sort=-version:refname | head -n 1 | grep -oE '[0-9]+$')
            if [ -z "$VERSION_PATCH" ]; then
              VERSION_PATCH=0
            else
              VERSION_PATCH=$((VERSION_PATCH + 1))
            fi
            NEW_TAG="${VERSION_PREFIX}${VERSION_MAJOR_MINOR}.${VERSION_PATCH}"
            echo "Generated new tag: $NEW_TAG"
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        
        - name: Push Git Tag
          run: |
            git config user.name "GitHub Actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag $NEW_TAG
            git push origin $NEW_TAG
